---
- name: make .R
  file: path="{{home}}/.R" state=directory
  become: no
  when: ansible_os_family == 'Darwin'

- name: use gcc installed by brew in compiling R libraries
  copy: dest="{{home}}/.R/MakeVars" content="CC=gcc-6\nCXX=g++-6"
  become: no
  when: ansible_os_family == 'Darwin'

- name: get R version
  shell: R --version | head -n1 | grep -E -o '[0-9]\.[0-9]'
  register: r__version
  changed_when: False

- set_fact: r__user_lib="/usr/local/lib/R/{{r__version.stdout}}/site-library"

- name: put Rprofile in dotfile
  template: src=Rprofile.j2 dest="{{home}}/dotfiles/Rprofile"
  become: no

- name: link Rprofile
  file: src="{{home}}/dotfiles/Rprofile" dest="{{home}}/.Rprofile" state=link
  become: no

- name: make user R library directory
  file: path="{{r__user_lib}}" state=directory mode=777
  become: yes

# install R packages; the code was taken from here http://adamj.eu/tech/2014/07/19/installing-and-removing-r-packages-with-ansible/
- name: install R packages
  command: >
    Rscript --slave --no-save --no-restore-history -e "if (! ('{{ item }}' %in% installed.packages()[,'Package'])) { install.packages(pkgs='{{ item }}', repos=c('{{r_pkg__repo}}')); print('Added'); } else { print('Already installed'); }"
  register: r_result
  failed_when: "r_result.rc != 0 or 'had non-zero exit status' in r_result.stderr"
  changed_when: "'Added' in r_result.stdout"
  with_items: '{{r_pkg__packages}}'

- name: install R packages using devtools
  command: >
    Rscript --slave --no-save --no-restore-history -e "if (! ('{{ item.name }}' %in% installed.packages()[,'Package'])) { library(devtools); devtools::install_github('{{ item.repo }}', args={{'\"{{item.args}}\"' | default('getOption(\"devtools.install.args\")')}}); print('Added'); } else { print('Already installed'); }"
  register: r_result
  failed_when: "r_result.rc != 0 or 'had non-zero exit status' in r_result.stderr"
  changed_when: "'Added' in r_result.stdout"
  with_items: '{{r_pkg__devtools_packages}}'


- name: get R package sources
  git: repo="{{ item.repo }}" dest="{{lookup('env','TMPDIR') | default('/tmp') }}{{item.repo | basename}}" version="{{item.tag_name}}"
  with_items: '{{r_pkg__src_packages}}'
  register: r_src_downloaded

- name: install R packages from source
  command: >
    Rscript --slave --no-save --no-restore-history -e "if (! ('{{ item.item.name }}' %in% installed.packages()[,'Package']) || '{{item.item.version}}' != installed.packages()['{{item.item.name}}', 'Version']) { install.packages(pkgs='{{lookup("env","TMPDIR") | default("/tmp") }}{{item.item.repo | basename}}', type='source', repo=NULL{% if item.item.conf_args is defined %}, configure.args='{{item.item.conf_args}}'{% endif %}); print('Added');} else { print('Already installed'); }"
  register: r_src_result
  failed_when: "r_src_result.rc != 0 or 'had non-zero exit status' in r_src_result.stderr"
  changed_when: "'Added' in r_src_result.stdout"
  with_items: '{{r_src_downloaded.results}}'
